
Vue CLI is command Line Interface

VueJs is an front-end framework which can be installed and which will make our works easy for us,
compile everything on our machine, not in a browser, live reload dev server
This VueJs will split the components and App.vue adn all the src and assest files will be pregenerated 

To create an VueJs CLI 

Pre-requested Node  
    to check the node   cmd -  node -v

    Install Vue CLI goto the github repo and copy the install cmd

        npm i -g vue-cli 
        // this will install cli globally in your machine

        To start using the cli we need to init using the cmd
            vue init <template name> <project name>

            example : vue init webpack my-project

    This will create an file where all the vue JS files and node modules files will be present 
    once we install we need to cd to the dir and give npm install to install all the dependencies in nodemodules

    After these steps we are ready to run the vueJs file using the cmd  

        npm run dev
            // this will run in local host in the browser


Files Tree :

in the files which we have created will give as set of files

    node_modules
    src
    index.html      // this is main or say as the root file from which browser loads to display
    .gitignore
    package.json
    webpack.config.js


    SRC File:
        this source folder is the second main folder where all our code lives and which will be sent to the index.html  
        for the rendering in the browser.

            Here we can see
                            assest
                            app.vue
                            main.js


In the main.js we can have all features of ES6 in the JavaScript such as import, short hand for functions and etc,.

Root Components for the project lives in the app.vue because we say 
        import App from './app.vue'
        render:h=>h(App)



        Basically a Vue file is simply a components file and it contains all the components code with template

            <template>
            </template>
            <script>
            export default {
                name: 'app', // name of the component when we have many this becomes handy
                data(){
                    return {
                        msg:"Hello world"
                    }
                }
            }
            </script>
            <style>
            </style>

Nesting Components

    Root Components is the parent or the top level Component,
    We may have many components and can be linked with other components or we can also have nested


    To create a new Components we need to create an .vue file and copy paste the app.vue file content

    Now We have created the component successfully, but we have not declared them anywhere

Register Components

    Register Globally or locally 
    
        Globally means we can use them any where in our project and nested easily

        locally means we can use them only in the components where we registered it


        Global Register steps:

                    1. the first step is to import the component import <name> from './<file-name>.vue'
                    2. Vue.component('<tag-name>',<name>); above the new Vue(); or say as after import 


        Local Register steps:

                    1. Go to the file where we need to register locally 
                    2. Inside the script tag import the component import <name> from './<file-name>.vue'
                    3. Inside the export default object create an components object and create '<tag-name>': <name>

                    for Example: 
                        <script>
                        import <name> from './<file-name>.vue'

                        export default {
                            components: {
                                '<tag-name>': <name>
                            },
                            data(){
                                return {
                                    ...
                                }
                            }
                        }

                        </script>


Style in components:

    Normally style in VueJs is same as in others, and we have already seen that every component files have their own Style tags
    and so we can write our style in these Style tags to get implemented in the components

    Here comes the difficulty that is when we style an element that is h1 or h2 or etc and if we style differently in two components 
    once when they are nested and in page we see problems that is style being implemented commonly for all the elements 
    
    This is because the style is not linked with the components alone once when everything are nested all comes into same
    and to avoid this problem we need to add an attribute to the style tag that is scoped

    <style scoped> ... </style>

    Adding the scoped attr in the style tag in the components file will give you extra functionality that is separate styling for
    different components.

    This is achieved using an unique attr getting added to each components 
    The styles are targetted with the attributed embedded with the unique attr

    component #1
        <style scoped>
        h1{
            color: red;
        }
        </style> 
    
    component #2
        <style scoped>
        h1{
            color: green;
        }
        </style> 

    In browser we can see that these styles will look like,

        component #1
            h1[29-dhj2-fd]{
                color: red;
            }

        component #2
            h1[32-dfh3-ds]{
                color: green;
            }
    
    So this way no Two components will have the same element selected in the style thus resulting in different results,


Props in CLI:

    Props as we already know what its used for, anyhow its used to transfer data from the parent to the child components
    Here the procedure is the same, declaring it in the props objects and calling them as an attribute in the components tag

    example:

    child Component:
        export default{
            props: ['<data-name>'],
            data(){
                return {
                    ...
                }
            }
        }

    Parent Component:

        <component v-bind:<data-name>="<actual-data>"> </component>


    The above code will work completely fine and thats not a problem, BUT we may also need validations,
    The same procedure has to be followed here the only difference is that we need to give it as object and not as array

     child Component:
        export default{
        props: {
            <data-name>: {
                type: <data-type>,
                required: true
            }
        }
        data(){
                return {
                    ...
                }
            }
        },


Primitive and Reference:

    Primitive types are String , Boolean, Number

    Reference type are Array, objects

    While we pass reference to the components its actually the reference and not a copy and if we edit in components it will edit 
    everyWhere and say as the root value of the data we passed as reference

    While we pass primitive to the components its will only edit the local copy of the data and not edit in the original place.
    Like it will create a copy and edit the data



Events:
    Events are the exact opposite of the props and event is something like which we wait for the action to happen or like comes
    from the child to the parent. like using the v-on:<event-name>.

    This is done using the $emit method and catch them in the parent using the v-on 

    child Component:
        <script>
        export default{
            data(){
                return {

                }
            },
            methods:{
                doSomeThing(){
                    this.$emit('callDoSomething', '<message>');
                }
            }
        }
        </script>

        parent Component:
            <template>
            <tag-name v-on:callDoSomething='functionCall($event)'></tag-name>
            </template>

            <script>
            export default{
                    data(){
                        return {

                        }
                    },
                    methods:{
                        functionCall(arg){
                            console.log("Called me from the child component", arg);
                        }
                    }
                }
            </script>


Event Bus:
    Event Bus is just an Vue Instance which can listen to event and emit and react to the events.

    To create an Event Bus we need to do it in the root component so that we can use it in all the components (main.js)

        const bus = new Vue(); // this is how you declare or create an Event Bus in main.js

        after this we need to call this event bus in other components to do so we need to import it in other files,
        inside the <script></script>

            we need to import them as 
                import { bus } from '../main';

        Thats all we declared the Event Bus in the main.js that is the root component and we have imported it in other components,


        To emit to the Event Bus:

            child Component 1:
                <script>
                export default{
                    data(){
                        return {

                        }
                    },
                    methods:{
                        doSomeThing(){
                            bus.$emit('callDoSomething', '<message>');
                        }
                    }
                }
                </script>


        To listen to the Event Bus we need to know about Life Cycle Hooks 

            Here we will first use created life cycle hook and check how it works
            // this created life cycle hook will be fired when event bus is created and will be listening to it

            child Component 2:
                <script>
                export default{
                    data(){
                        return {

                        }
                    },
                    creates(){          // this created life cycle hook will be fired when event bus is created and will be listening to it
                        bus.$on('callDoSomething', (arg)=>{
                            ...
                        })
                    }
                }
                </script>

Life Cycle Hooks:

    This life cycle hooks are nothing but the function which are fired at some certain time of the vue execution,

    There are many function called as life cycle hook and the help it provides us is in the particular time of execution 
    er can add some lines of code which we want the vue to run it at that particular point of time

    Life Cycle Hooks:
        beforeCreate()  // before the observe Data being checked
        created()   // after the data and init Events are fired 

        beforeMount()   // before mounting in the DOM  that is the el id template getting mounted
        mounted()   // after mounting in the DOM 

        beforeUpdate()  // after mounted we can update the component or instance this beforeUpdate is fired
        updated()   // After the update is done this is fired

        beforeDestroy() // destroy or cleanup any components or instance 
        destroyed() // final Clean up after getting destroyed

    
Slots :

    In the above notes you would have seen that we can send datas using props snding templat using props is not a good idea 

    and so we can send templates using Slot

    these are used to send templates itself to the child and naming them helps vue to know where to embed them in the child component

    so we use the slot tagname in the child component and in parent we type inbetween the custom component tag name 
    and we need to name them using the slot and accessing the slot with name in the child component will help 


    Parent Component:
        <component-tag-name>
                <h1 slot="heading">Heading</h1>       
                <h1 slot="body">Body</h1>       
                <h1 slot="footer">Footer</h1>       
        </component-tag-name>

    Child Component:
        <template>
        <div>
            <slot name="heading"></slot>
            <h1> I am Title </h1>
            <slot name="body"></slot>
            <slot name="footer"></slot>
        </div>
        </template>

    
    Once when we need some data to be dynamic data and that template which will be send to the child component make sure the data is 
    in the parent itself because it will not check the value inside the child components


Dynamic Compoenents:

    The concept here is to have an dynamic component which is to be rendered in the screen that is not by using the show or v-if 
    complete new creation of component with dynamic behaviour of the user 

    If we use the component-tag-name we wont be able to use this Dynamic behaviour and so use this Dynamic behaviour we need to 
    use an another VUE JS tag called as <component></component>

    Old Way of using components:
        <component-tag-name></component-tag-name>

    New Dynamic way of using components:
        <component is="<component-tag-name>"></component>

    By the above example you must have understood that the component tag is more like common tag with same name but the only difference
    is that it has the "is" attribute and this "is" attribute will tell which component to be rendered in the place of component tag

    We can have this "is" attribute to be v-bind and so that when ever we change any value to the data we can change the component that 
    is rendered.

        <component v-bind:is="component"></component>

        data(){
            return {
                component: "<component-tag-name>"
            }
        }


Input Binding:

    This is the same old concpet which we saw in the basic concepts, where we can have a dynamic data property which will store data
    when ever a user changes data in the input field and this functionality is achieved by adding the attribute v-model


    // Main Thing here which we need to see is that we have a modifer for these attr and for v-model we have .lazy thing


    This .lazy is used when we need some data to be previewed in the browser but not change as soon as the user inputs even a letter 
    and should update that data only once after the user has completed the input and focus away we give .lazy


    <input type="text" v-model.lazy="message">

    <p>{{ message }}</p> // here the data message will only get updated when the user is focus out of the particular input field


Checkbox Binding:

        Here also the concepts of saving the data is same just as we did in the input binding using the v-model,

        The difference between an input binding and a checkbox binding is that check box may have multiple values to be added,
        and so we need to create an array object in the data object,

        And while we we bind that with the property in the data object we need to v-model them all with the same property and so
        All other things will be taken care by the VueJS 

            <label for="capabc">ABC</label>
            <input type="checkbox" id="capabc" v-model="types">

            <label for="num">123</label>
            <input type="checkbox" id="num" v-model="types">

            <label for="specialchar">!@#</label>
            <input type="checkbox" id="specialchar" v-model="types">

            <label for="smallabc">abc</label>
            <input type="checkbox" id="smallabc" v-model="types">

            <script>
            export default{
                data(){
                    return {
                        types: []
                    }
                }
            }
            </script>

        The above example is the working of checkbox binding.


Select box Binding:

        Here also the concepts of saving the data is same just as we did in the input binding using the v-model,

        Simple concepts of the selectbox is that we may have multiple options and and once when we select any option this will get
        selected and sent to the select tag and this select tag will only hold the value as the input and thats why we need to add
        the v-model to the select tag and not to the option

        By adding this v-model to the select tag we can restict the user to select only one value from the below options field

        <select v-model="selected">
            <option v-for="option in options">{{ option }}</option>
        </select>

        data(){
            return {
                selected ="",
                option=["option 1", "option 2","option 3","option 4"]
            }
        }

        Here main give a away is that we need to give v-model to the select tag.


Custom Directives:

    Directives are the things which we have already used a lot those are the v- things which we write as ":" things

    For example we have used the v-for v-on v-if v-model all these are the directives 
    Say as we need a custom directive which will work for our convenients this is so Simple

    To declare an Custom Directive we need to type in the main.js file 
    we have three main arg that is to be given inside the bind life cycle hook, those are the el for elements 
    binding for the bind value, etc., vnode for the virtual node for back-end process 
    
    the below example explains how we can modify or change the elements on which this directive is applied

        main.js
            Vue.directive('<custom-directive-name>', {
                bind(el, binding, vnode){ // this is bind life cycle hook // vnode is virtual node // el element
                    el.style.color = "#"+ Math.random.toString().slice(2,8);
                }
            })

    the below example explains how we can modify or change the value of the element on which directive is applied

        main.js
            Vue.directive('theme',{
                bind(el, binding, vnode){
                    console.log(binding.value) // by this we can get the value of the element where the directive is used 
                }
            })

    The below code is something imp which is you will find the wide inside the template being surrounded by two " , '.
        This is because in this example we are sending an string not an object to let VUE know its String we 
        need to give in spec that its String. We can also send Objects or Array to the directive. 
        example code :
            <template>
                <div v-theme=" 'wide' ">...</div>
            </template>

             main.js
                Vue.directive('theme',{
                    bind(el, binding, vnode){
                        if (binding.value == 'wide'){
                            el.style.maxWidth= "1200px";
                        }
                        console.log("To get the arg", binding.arg )
                    }
                })
            
    Arguments in the directives are those which comes after the : that is v-on:click="<function-name>"
            click = Argument            <function-name> = Value  

           
Filters :

    What is filter, these filters are used to change the value dynamic data appear on the browser this will affect the original
    data, but will affect the viewing in browser where ever we use the filter with the dynamic data 

    To use filter we need to give an pipe line and then add the name of the filter 
    there is no Default filter by VUEJS
    For example :

        <template>
            <div>{{ data | to-uppercase }}</div> // to-uppercase is the filter name,  | is tell Vue this is filter
        </template>

        main.js:

            Vue.filter('to-uppercase', function(value){
                return value.toUpperCase();
            });

    Custom Search Filter:

        Here we may always need a search which will search the data in the page and return us the searched data
        So we can do this with the filter for this we will take blog example and do it 


            <template>
                <input type="text" v-model="search" />
                <ul>
                <li v-for="data in datas | search "> {{ data }}</li> // DONT DO THIS VUEJS DOESN'T WANT YOU TO DO THIS WAY PERFORMANCE ISSUES
                </ul>
            </template>

        for that we need to create a computed property and achieve this behaviour,

                <template>
                <input type="text" v-model="search" />
                <ul>
                <li v-for="data in filterdatas "> {{ data }}</li>
                </ul>
            </template>

            export default {
                data(){
                    return{
                        search:''
                    }
                },
                computed:{
                    filterdatas: function(){
                        return this.datas.filter((data)=>{
                            return data.match(this.search)
                        })
                    }
                }
            }

        What is happening here is that we are creating an computed property for the searched results and thus this is being rendered in DOM
        and so we have good performance by doing this computed way than using the filter version for the search functionality


Registering Directives and Filters Locally:

    From the above concepts you would have understood how to use custom directives and Filters. how to declare them in the main.js 
    that is declaring them Globally to use any where in the project. But what if you needed some filter or directive which you only
    want in some components and so you need them to be registered locally we can do it here...


        <script>
            export default {
                data (){
                    return {

                    }
                },
                methods:{

                },
                created(){

                },
                computed:{

                },
                filters:{ // Here the value will be function or you can use ES6 short Hand
                    'to-uppercase': function(value){
                        return value.toUpperCase();
                    }
                    // we can also write above code block as below
                    toUppercase(value){ // here you can see the - is removed and second word first letter is capitalized 
                        return value.toUpperCase();
                    }
                },
                directives:{ // Here the value will be object type 
                    '<name>':{
                        bind(el, binding, vnode){
                            el.style.color = "red";
                        }
                    }
                }
            }
        </script>

    The above examplee is for registering the filters and directives locally and this is done in the component file where we 
    may need the filters and directives to behave differently. 


HTTP REQUEST :

    This HTTP request are worked using an node package which is recommand by VUE itself and this node package is called as vue-resource 


    To Install vue-resource we need to give

        npm install vue-resource --save // this will install and add in the dependencies file 

    Steps to work with vue-resource 

        1. First we need to import the vue-resource in the main.js file to use the plugin 
                        import VueResource from 'vue-resource'

        2. Register or tell Vue to use this to do so we give    
                        Vue.use(VueResource);

        3. After registering it we can use it as how we would use an emit function but this is an promise

            // this example is the GET method

                Usually this GET method are trigger when the page loads and so we have used in the 
                created life cycle hooks you may also consider keeping it in some method and trigger the function

                        <script>
                            export default {
                                data (){
                                    return {
                                        blogs = []
                                    }
                                },
                            created(){
                                this.$http.get('<url>').then(function(data){
                                    console.log(data);
                                    this.blogs = data.body;
                                    })
                                }
                            }
                        </script>

            // this example is the POST method

                Usually this POST, PATCH request are made using a function call and thats why its inside methods 
                here the method name is post
            
                        methods:{
                            post:function(){
                                this.$http.post('<url>',{
                                    < data to be sent as object >
                                }).then(function(data){
                                    console.log(data); // return data like conformation on success
                                });
                            }
                        }

        4. Link of vue-resource https://github.com/pagekit/vue-resource 


Mixins: 
    Block of code where we can use this in many different place to achieve DRY concept

    Here in our notes we have already did it that is the computed popertie searchBlog,
    which was in two different components but what we did was we copy pasted computed function in both

    But we have a better way to do this That is using the mixins and which can be used any where you need
    inside the project .

    Steps to use the Mixin:

        1. We are going to create a separate Js file 
        2. from here we will export an object and inside the object we will have computed key
        3. all the things inside this object is same as how we declare an computed property Normally

        <name>mixin.js:
            export default {
                computed:{
                    <computed-name>:function(){
                        < function body code >
                    }
                }
            }

        4. Okay now we have created the mixin separate file and its ready to be used
        5. Now where ever we need the mixin code we need to import it inside script tag
                import <mixin_name> from ./mixins/<name>mixin

        6. After Importing the mixin we need to declare it down in the export default object 
            of the particular component your in 

                export default{
                    data(){
                        return{ ... }
                    },
                    mixins:[<mixin_name>]
                }


Setting Up Routes :

    VUEJS natively doesn't provide us with the functionality of routing and so we need to use a 
    npm package which is called as vue-router to start using it we need to install it.

        1. install vue-router 
            npm install vue-router --save

        2. Import the vue-router in the main.js 
        3. Tell vuejs to use it by giving 
                import VueRouter fom 'vue-router'

                Vue.use(VueRouter);
            
        4. To set up this Routes we need to create new instance of the Router 

                const router = new VueRouter({
                    // routes : [<registering routes>] // {path:'', component:<component>}
                });
                but we are not going to do it this way because of step 5
        5. Inside this we need to register the routes but best practice is to keep it separate
        6. Create new JS file named routes.js and export default with the routes 

                export default[
                    {path:'/',component: <components>}
                ]
        7. To use the components we need to import the components and give the name of components
        8. Now we need to import the routes to the main.js so add them in the routes instance 
                import Routes from './routes'

                const router = new Router({
                    routes : Routes
                })
        
        9. the last step is to tell Vue to use the route instance in our project by adding it inside 
            vue instance of the project as router: router 

                new Vue({
                    el:'#app',
                    render: h=>h(app),
                    router:router
                })

        Also We have an advantage over here so now we dont need to use static components in the app.vue 
        we can use the routes to dynamically add the component name to the root component 

        We also have tag which makes this process easy and handy that is <router-view>

                <router-view></router-view>     // will dynamically change as per routings 

Hash and History:

    What is Hash, Normally you would come accross the single page website where the nav bar will take
    you to some section in the same place that is not requesting the server for each routes 

    This method is defaultly used by the VueJS 
    You can see url when we start using the VueJS routes showing 
        
            localhost:8080/#/<route-name>

    If we need the history mode that is to request the server each time we change the routes
    we can change this behaviour by changing it in the router instance with key "mode" value "history"

            const router = new VueRouter({
                routes: Routes,
                mode: 'history' // default mode : 'hash'
            })

    By this we can change this hashing behaviour of vue    


Router Link :

    Usually in every website you will find that we will have an nav bar which will take us to 
    different routes in that website, for this we have Anchor tag which we will use for navbars

    But in VueJS we have tag name called as router-link

            <router-link to="/">home<router-link>
            <router-link to="/add">add<router-link>

    Why we use this is because we get extra functionality like class name being added for stylings

            class = 'router-link-active router-link-exact-active'

        // These two class names are automatically added by vue router-link-active is 
        added when the url has atleast the part of path like 
            
                localhost:8080/add 
                the above url will give home anchor tag router-link-active class 
                                        add anchor tag with router-link-exact-active class name 

    If we see in the browser we can see that as anchor tag only but from vue point its router-links

    We also have an attribute exact to change the class name and to be given to only the exact match url

        <router-link to="/add" exact>add</router-link>


Route Params :

    You would have already known what are params and how helpfull they can be,

    Params are the part of url where they are dynamic values presenting the data in browser 

    To get this params from the url we can give in the place where we declare the route links 
    that is in the routes.js file with in the path key the value can contain the name of params with :<>

    this ":" will indicate VUEJS that this key after ":" will be dynamic and developer uses in backend code

    To get the route parameter in the script in components we simply need to type 

            this.$route.params.<param-name>

            <script>
            export default{
                data(){
                    return {
                        id : this.$route.params.id
                    }
                },
                created(){
                    this.$http.get('<url>'+this.id).then((data){
                        console.log(data)
                    })
                }
            }
            <script>


-----------------------------------------------------------------------------------------------------------------------------


DATABASE CONCEPTS: 

Here we will be using Google firebase console this is not linked with vueJS but for development we can test with it.

    1. Here to use an GFC google firebase console we need to create an account 
    2. Goto the database nav and create an project and you will get the url to the particular database
    3. Goto the rules and change it as per your need and for development you can give true for both read and write keys 
    4. Copy the url and add it to the VUEJS so that we can go to the particular url and store datas 


    Once all the set-up is made the story for using it same as how we did for the HTTP concept 

    methods:{
        post:function(){
            this.$http.post('<url>/<data-name>.json', {}).then((data){ // .json given because GFC uses JSON file saving NO-SQL database 
                console.log(data)
            })   
        }
    }

    // The above step even if the firebase doesnt have an data-name it will create and if present it will add data to it 

    Here the ID is not integer, it uses some string as the ID 

    to get this ID we can use some simple method that is below 

        creates(){
            this.$http.get('<url>').then((data){
                return data.json(); // this is function where the data is converted to proper json format
            }).then(function(data){
                var arr = [];
                for (let id in data){
                    console.log(id)    // this will give you all the id present in the FGC 
                    console.log(data[id])    // this will give data one by one 
                    data[key].id = id  // adding new id value pairs that is "id" key and "id" value
                    arr.push(data[id]) // this step is made so we have new arr with data from GFC and "id" key added now 
                }
                this.<data> = arr;
            })
        }

